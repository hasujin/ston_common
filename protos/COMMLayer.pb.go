// Code generated by protoc-gen-go. DO NOT EDIT.
// source: COMMLayer.proto

/*
Package COMMLayer is a generated protocol buffer package.

It is generated from these files:
	COMMLayer.proto

It has these top-level messages:
	ProcessRequest
	ProcessResponse
*/
package COMMLayer

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_CHANNEL_LIST                MessageType = 0
	MessageType_CHANNEL_CONFIG              MessageType = 1
	MessageType_BLOCKCHAIN_INFO             MessageType = 2
	MessageType_BLOCK_INFO_NUMBER           MessageType = 3
	MessageType_TRANSACTION_INFO            MessageType = 4
	MessageType_INSTALLED_CHAINCODE_LIST    MessageType = 5
	MessageType_INSTANTIATED_CHAINCODE_LIST MessageType = 6
	MessageType_QUERY_CHAINCODE             MessageType = 7
	MessageType_INVOKE_CHAINCODE            MessageType = 8
	MessageType_COMMIT_STATUS               MessageType = 9
	MessageType_DOCKER_PS                   MessageType = 10
)

var MessageType_name = map[int32]string{
	0:  "CHANNEL_LIST",
	1:  "CHANNEL_CONFIG",
	2:  "BLOCKCHAIN_INFO",
	3:  "BLOCK_INFO_NUMBER",
	4:  "TRANSACTION_INFO",
	5:  "INSTALLED_CHAINCODE_LIST",
	6:  "INSTANTIATED_CHAINCODE_LIST",
	7:  "QUERY_CHAINCODE",
	8:  "INVOKE_CHAINCODE",
	9:  "COMMIT_STATUS",
	10: "DOCKER_PS",
}
var MessageType_value = map[string]int32{
	"CHANNEL_LIST":                0,
	"CHANNEL_CONFIG":              1,
	"BLOCKCHAIN_INFO":             2,
	"BLOCK_INFO_NUMBER":           3,
	"TRANSACTION_INFO":            4,
	"INSTALLED_CHAINCODE_LIST":    5,
	"INSTANTIATED_CHAINCODE_LIST": 6,
	"QUERY_CHAINCODE":             7,
	"INVOKE_CHAINCODE":            8,
	"COMMIT_STATUS":               9,
	"DOCKER_PS":                   10,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Status int32

const (
	Status_SUCCESS Status = 1
	Status_ERROR   Status = 0
)

var Status_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR",
}
var Status_value = map[string]int32{
	"SUCCESS": 0,
	"ERROR":   1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The request message. Extend if it is necessary.
type ProcessRequest struct {
	RequestType int32  `protobuf:"varint,1,opt,name=requestType" json:"requestType,omitempty"`
	Args        string `protobuf:"bytes,2,opt,name=args" json:"args,omitempty"`
	Document    []byte `protobuf:"bytes,3,opt,name=document,proto3" json:"document,omitempty"`
}

func (m *ProcessRequest) Reset()                    { *m = ProcessRequest{} }
func (m *ProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessRequest) ProtoMessage()               {}
func (*ProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProcessRequest) GetRequestType() int32 {
	if m != nil {
		return m.RequestType
	}
	return 0
}

func (m *ProcessRequest) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *ProcessRequest) GetDocument() []byte {
	if m != nil {
		return m.Document
	}
	return nil
}

type ProcessResponse struct {
	// status code
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// error message
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// payload data
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ProcessResponse) Reset()                    { *m = ProcessResponse{} }
func (m *ProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessResponse) ProtoMessage()               {}
func (*ProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProcessResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ProcessResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ProcessResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*ProcessRequest)(nil), "COMMLayer.ProcessRequest")
	proto.RegisterType((*ProcessResponse)(nil), "COMMLayer.ProcessResponse")
	proto.RegisterEnum("COMMLayer.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("COMMLayer.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for COMMLayer service

type COMMLayerClient interface {
	ProcessCOMM(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
}

type cOMMLayerClient struct {
	cc *grpc.ClientConn
}

func NewCOMMLayerClient(cc *grpc.ClientConn) COMMLayerClient {
	return &cOMMLayerClient{cc}
}

func (c *cOMMLayerClient) ProcessCOMM(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := grpc.Invoke(ctx, "/COMMLayer.COMMLayer/ProcessCOMM", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for COMMLayer service

type COMMLayerServer interface {
	ProcessCOMM(context.Context, *ProcessRequest) (*ProcessResponse, error)
}

func RegisterCOMMLayerServer(s *grpc.Server, srv COMMLayerServer) {
	s.RegisterService(&_COMMLayer_serviceDesc, srv)
}

func _COMMLayer_ProcessCOMM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COMMLayerServer).ProcessCOMM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/COMMLayer.COMMLayer/ProcessCOMM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COMMLayerServer).ProcessCOMM(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _COMMLayer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "COMMLayer.COMMLayer",
	HandlerType: (*COMMLayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCOMM",
			Handler:    _COMMLayer_ProcessCOMM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "COMMLayer.proto",
}

func init() { proto.RegisterFile("COMMLayer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0xdd, 0xc2, 0x02, 0xdb, 0xcb, 0x2e, 0x0c, 0xd7, 0x8f, 0x54, 0x34, 0xb1, 0xe1, 0x89, 0xac,
	0x09, 0x0f, 0xfa, 0x0b, 0xca, 0x50, 0xa4, 0xa1, 0xcc, 0xe0, 0xcc, 0xa0, 0xf1, 0xc1, 0x34, 0x5d,
	0x76, 0x42, 0x4c, 0xdc, 0x6d, 0xed, 0x94, 0x07, 0x1e, 0xfd, 0x2b, 0xfe, 0x52, 0xd3, 0x0f, 0x60,
	0x8d, 0xbe, 0xdd, 0x73, 0xee, 0xc9, 0xb9, 0x93, 0x39, 0x07, 0xfa, 0x94, 0xaf, 0x56, 0x61, 0x7c,
	0xd0, 0xd9, 0x24, 0xcd, 0x92, 0x3c, 0x41, 0xfb, 0x44, 0x8c, 0xee, 0xa0, 0xb7, 0xce, 0x92, 0xad,
	0x36, 0x46, 0xe8, 0x9f, 0x7b, 0x6d, 0x72, 0x74, 0xa1, 0x9b, 0x55, 0xa3, 0x3a, 0xa4, 0xda, 0xb1,
	0x5c, 0x6b, 0xdc, 0x12, 0x4f, 0x29, 0x44, 0xb8, 0x8c, 0xb3, 0x9d, 0x71, 0x1a, 0xae, 0x35, 0xb6,
	0x45, 0x39, 0xe3, 0x10, 0xae, 0xee, 0x93, 0xed, 0xfe, 0x41, 0x3f, 0xe6, 0x4e, 0xd3, 0xb5, 0xc6,
	0xd7, 0xe2, 0x84, 0x47, 0xdf, 0xa0, 0x7f, 0xba, 0x61, 0xd2, 0xe4, 0xd1, 0x68, 0x7c, 0x09, 0x6d,
	0x93, 0xc7, 0xf9, 0xde, 0xd4, 0xfe, 0x35, 0x42, 0x07, 0x3a, 0x0f, 0xda, 0x98, 0x78, 0xa7, 0x6b,
	0xf7, 0x23, 0x2c, 0x36, 0x69, 0x7c, 0xf8, 0x91, 0xc4, 0xf7, 0xb5, 0xff, 0x11, 0xde, 0xfe, 0x6a,
	0x40, 0x77, 0x55, 0xa9, 0xca, 0xe7, 0x11, 0xb8, 0xa6, 0x0b, 0x8f, 0x31, 0x3f, 0x8c, 0xc2, 0x40,
	0x2a, 0x72, 0x81, 0x08, 0xbd, 0x23, 0x43, 0x39, 0x9b, 0x07, 0x1f, 0x89, 0x85, 0xcf, 0xa0, 0x3f,
	0x0d, 0x39, 0x5d, 0xd2, 0x85, 0x17, 0xb0, 0x28, 0x60, 0x73, 0x4e, 0x1a, 0xf8, 0x02, 0x06, 0x25,
	0x59, 0xe2, 0x88, 0x6d, 0x56, 0x53, 0x5f, 0x90, 0x26, 0x3e, 0x07, 0xa2, 0x84, 0xc7, 0xa4, 0x47,
	0x55, 0xc0, 0x6b, 0xf1, 0x25, 0xbe, 0x01, 0x27, 0x60, 0x52, 0x79, 0x61, 0xe8, 0xcf, 0xa2, 0xd2,
	0x86, 0xf2, 0x99, 0x5f, 0xdd, 0x6c, 0xe1, 0x5b, 0x78, 0x5d, 0x6e, 0x99, 0x0a, 0x3c, 0xf5, 0xaf,
	0xa0, 0x5d, 0x3c, 0xe0, 0xd3, 0xc6, 0x17, 0x5f, 0xcf, 0x1b, 0xd2, 0x29, 0x2e, 0x05, 0xec, 0x33,
	0x5f, 0xfa, 0x4f, 0xd8, 0x2b, 0x1c, 0xc0, 0x4d, 0x91, 0x58, 0xa0, 0x22, 0xa9, 0x3c, 0xb5, 0x91,
	0xc4, 0xc6, 0x1b, 0xb0, 0x67, 0x9c, 0x2e, 0x7d, 0x11, 0xad, 0x25, 0x81, 0x5b, 0x17, 0xda, 0xb2,
	0xfa, 0xc1, 0x2e, 0x74, 0xe4, 0x86, 0x52, 0x5f, 0x4a, 0x72, 0x81, 0x36, 0xb4, 0x7c, 0x21, 0xb8,
	0x20, 0xd6, 0x7b, 0x09, 0xe7, 0xd4, 0x71, 0x0e, 0xdd, 0x3a, 0x91, 0x82, 0xc3, 0x57, 0x93, 0x73,
	0x43, 0xfe, 0x6e, 0xc3, 0x70, 0xf8, 0xbf, 0x55, 0x15, 0xe2, 0xe8, 0x62, 0xfa, 0x0e, 0x06, 0xdf,
	0x93, 0xc9, 0x2e, 0x4b, 0xb7, 0x67, 0xd9, 0xb4, 0x77, 0x1a, 0xd7, 0x45, 0xdb, 0xd6, 0xd6, 0xef,
	0x46, 0x73, 0x11, 0x7e, 0xb9, 0x6b, 0x97, 0xe5, 0xfb, 0xf0, 0x27, 0x00, 0x00, 0xff, 0xff, 0x09,
	0xb0, 0x11, 0x9a, 0x8f, 0x02, 0x00, 0x00,
}
